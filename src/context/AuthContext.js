import { createContext, useState, useEffect } from "react";
import { jwtDecode } from "jwt-decode";
import axiosInstance, { bareAxios, setOnRefreshFailed } from "../api/axiosInstance";

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
    const [accessToken, setAccessToken] = useState(null);
    const [user, setUser] = useState(null); // Contiendra le payload du token
    const [isConnected, setIsConnected] = useState(false);

    useEffect(() => {
        /* 
            On branche le crochet setOnRefreshFailed au montage : si l'appel au refresh token Ã©choue â†’ logout + /login
            Quand le AuthProvider se monte, il appelle setOnAuthFailed et donne Ã  api.js une fonction concrÃ¨te :
            Si le refresh Ã©choue, alors appelle logout() et redirige vers /login.
            Du coup, la variable onAuthFailed dans api.js nâ€™est plus null, elle contient maintenant la callback passÃ©e depuis le provider.
            On Ã©vite d'importer la fonction logout du AuthContext dans le fichier axiosInstance pour ne pas crÃ©er d'imports circulaires
        */
        setOnRefreshFailed(async () => {
            await logout();
            window.location.assign("/login");
        });
    }, []);

    /* 
        Chargement de page: On tente un refresh de l'access token et du refresh token via cookie HttpOnly(ci-prÃ©cÃ©dement connectÃ©) 
        sinon l'Ã©tat prÃ©cÃ©dent du context est effacÃ©, le hook isConnected est mis Ã  false et l'utilisateur redirigÃ© vers la page de loggin
        sans avoir effectuÃ© de logout et bien reset l'Ã©tat du context de l'application
    */
    useEffect(() => {
        /* 
            Variable qui sert uniquement de garde-fou dans les effets asynchrones.
            Si le composant se dÃ©monte (nouveau rechargement de page par exemple => cas extrÃªmement minime mais Ã  prendre en considÃ©ration) avant que 
            l'appel asynchrone Ã  l'api ne se rÃ©solve, on a une mise Ã  jour dâ€™Ã©tat sur un composant dÃ©montÃ© â†’ React loggue un warning du style : 
            "Can't perform a React state update on an unmounted component."
        */
        let mounted = true;

        // Ã‰viter des erreurs 500 inutiles liÃ©es Ã  l'expiration du refresh token si tu sais quâ€™il nâ€™y a pas dâ€™accessToken.
        if (!sessionStorage.getItem("accessToken")) return;

        // Astuce syntaxique pour pouvoir utiliser await proprement dans useEffect.
        (async () => {
            try {
                const response = await bareAxios.post("auth/token/refresh/");
                
                if (response?.data?.access && mounted) {
                    const token = response.data.access;
                    const decoded = jwtDecode(token);

                    setAccessToken(token);
                    setUser(decoded);
                    setIsConnected(true);
                    sessionStorage.setItem("accessToken", token);
                    axiosInstance.defaults.headers.common.Authorization = `Bearer ${token}`;
                }
            } catch (_) {
                // pas connectÃ© (refresh expirÃ©)
                sessionStorage.removeItem("accessToken");
                delete axiosInstance.defaults.headers.common.Authorization;
            } 
        })();
        // IIFE (Immediately Invoked Function Expression)
        // S'exÃ©cute immÃ©diatement en async dans useEffect sans polluer le scope avec un nom de fonction

        // Quand le composant se dÃ©monte, la variable passe Ã  false â†’ la mise Ã  jour du contexte ne sâ€™exÃ©cute plus.
        return () => (mounted = false);
    }, []);


    // Login utilisateur
    const login = async (data) => {
        try {
            const response = await axiosInstance.post("auth/login/", data);

            if (response.status === 200 && response.statusText === "OK") {
                const token = response.data.access;
                const decoded = jwtDecode(token);
    
                setAccessToken(token);
                setUser(decoded);
                setIsConnected(true);
                sessionStorage.setItem("accessToken", token);

                // Pose l'Authorization pour TOUTES les futures requÃªtes effectuÃ©es avec axiosInstance
                axiosInstance.defaults.headers.common.Authorization = `Bearer ${token}`;
    
                return { ok: true };
            } else {
                return { ok: false, message: "Serveur actuellement inaccessible" }; 
            }
        } catch (err) {
            const status = err?.response?.status;

            if (status === 401 || status === 403 || status === 400) {
                return { ok: false, message: err.response.data.detail };
            }

            return { ok: false, message: "Impossible de se connecter. RÃ©essayer plus tard." };
        }
    };
    

    // ðŸšª DÃ©connexion de l'utilisateur
    const logout = async () => {
        try {
            await bareAxios.post("auth/logout/", {}); // supprime le cookie contenu dans la config
        } catch (e) {
            console.warn("Logout server-side failed:", e);
        } finally {
            setAccessToken(null);
            setUser(null);
            setIsConnected(false);
            sessionStorage.removeItem("accessToken");
            // Retire l'Authorization global
            delete axiosInstance.defaults.headers.common.Authorization;
        }
    };


    return (
        <AuthContext.Provider 
            value={{ accessToken, user, isConnected, login, logout }}
        >
            {children}
        </AuthContext.Provider>
    );
};
